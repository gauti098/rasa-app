{"version":3,"sources":["src/server/permissions/checkers/AppCommandsBridge.ts"],"names":[],"mappings":";;;AACA,8EAA2E;AAC3E,8EAA2E;AAC3E,sDAAmD;AAEtC,QAAA,iBAAiB,GAAG;IAC7B,aAAa,CAAC,KAAa;QACvB,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC5E,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK;gBACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,OAAO,CAAC,OAAO,CAAC;aACvD,CAAC,CAAC;SACN;IACL,CAAC;IACD,gBAAgB,CAAC,OAAe,EAAE,KAAa;QAC3C,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,aAAa,CAAC,OAAe,EAAE,KAAa;QACxC,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,cAAc,CAAC,OAAe,EAAE,KAAa;QACzC,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,aAAa,CAAC,OAAsB,EAAE,KAAa;QAC/C,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,cAAc,CAAC,OAAe,EAAE,KAAa;QACzC,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,eAAe,CAAC,OAAsB,EAAE,KAAa;QACjD,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,iBAAiB,CAAC,OAAe,EAAE,KAAa;QAC5C,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;CACJ,CAAC","file":"AppCommandsBridge.js","sourcesContent":["import { ISlashCommand } from '../../../definition/slashcommands';\nimport { PermissionDeniedError } from '../../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../../managers/AppPermissionManager';\nimport { AppPermissions } from '../AppPermissions';\n\nexport const AppCommandsBridge = {\n    hasPermission(appId: string) {\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.command.default)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.command.default],\n            });\n        }\n    },\n    doesCommandExist(command: string, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    enableCommand(command: string, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    disableCommand(command: string, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    modifyCommand(command: ISlashCommand, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    restoreCommand(command: string, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    registerCommand(command: ISlashCommand, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    unregisterCommand(command: string, appId: string): void {\n        return this.hasPermission(appId);\n    },\n};\n"]}