{"version":3,"sources":["src/server/permissions/checkers/AppEnvironmentalVariableBridge.ts"],"names":[],"mappings":";;;AAAA,8EAA2E;AAC3E,8EAA2E;AAC3E,sDAAmD;AAEtC,QAAA,8BAA8B,GAAG;IAC1C,iBAAiB,CAAC,KAAa;QAC3B,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YACrE,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK;gBACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,GAAG,CAAC,IAAI,CAAC;aAChD,CAAC,CAAC;SACN;IACL,CAAC;IACD,cAAc,CAAC,UAAkB,EAAE,KAAa;QAC5C,OAAO;IACX,CAAC;IACD,UAAU,CAAC,UAAkB,EAAE,KAAa;QACxC,OAAO;IACX,CAAC;IACD,KAAK,CAAC,UAAkB,EAAE,KAAa;QACnC,OAAO;IACX,CAAC;CACJ,CAAC","file":"AppEnvironmentalVariableBridge.js","sourcesContent":["import { PermissionDeniedError } from '../../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../../managers/AppPermissionManager';\nimport { AppPermissions } from '../AppPermissions';\n\nexport const AppEnvironmentalVariableBridge = {\n    hasReadPermission(appId: string) {\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.env.read)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.env.read],\n            });\n        }\n    },\n    getValueByName(envVarName: string, appId: string): void {\n        return;\n    },\n    isReadable(envVarName: string, appId: string): void {\n        return;\n    },\n    isSet(envVarName: string, appId: string): void {\n        return;\n    },\n};\n"]}