{"version":3,"sources":["src/server/permissions/checkers/AppHttpBridge.ts"],"names":[],"mappings":";;;AACA,8EAA2E;AAC3E,8EAA2E;AAC3E,sDAAmD;AAEtC,QAAA,aAAa,GAAG;IACzB,IAAI,CAAC,IAA4B;QAC7B,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,+BAAc,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YACpF,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,kBAAkB,EAAE,CAAC,+BAAc,CAAC,UAAU,CAAC,OAAO,CAAC;aAC1D,CAAC,CAAC;SACN;IACL,CAAC;CACJ,CAAC","file":"AppHttpBridge.js","sourcesContent":["import { IHttpBridgeRequestInfo } from '../../bridges';\nimport { PermissionDeniedError } from '../../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../../managers/AppPermissionManager';\nimport { AppPermissions } from '../AppPermissions';\n\nexport const AppHttpBridge = {\n    call(info: IHttpBridgeRequestInfo): void {\n        if (!AppPermissionManager.hasPermission(info.appId, AppPermissions.networking.default)) {\n            throw new PermissionDeniedError({\n                appId: info.appId,\n                missingPermissions: [AppPermissions.networking.default],\n            });\n        }\n    },\n};\n"]}