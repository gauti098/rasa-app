{"version":3,"sources":["src/server/permissions/checkers/AppRoomBridge.ts"],"names":[],"mappings":";;;AAEA,8EAA2E;AAC3E,8EAA2E;AAC3E,sDAAmD;AAEtC,QAAA,aAAa,GAAG;IACzB,iBAAiB,CAAC,KAAa;QAC3B,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACtE,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK;gBACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,IAAI,CAAC,IAAI,CAAC;aACjD,CAAC,CAAC;SACN;IACL,CAAC;IACD,kBAAkB,CAAC,KAAa;QAC5B,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACvE,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK;gBACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,IAAI,CAAC,KAAK,CAAC;aAClD,CAAC,CAAC;SACN;IACL,CAAC;IACD,MAAM,CAAC,IAAW,EAAE,OAAsB,EAAE,KAAa;QACrD,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IACD,OAAO,CAAC,MAAc,EAAE,KAAa;QACjC,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,SAAS,CAAC,QAAgB,EAAE,KAAa;QACrC,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,cAAc,CAAC,MAAc,EAAE,KAAa;QACxC,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,gBAAgB,CAAC,QAAgB,EAAE,KAAa;QAC5C,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,oBAAoB,CAAC,QAAuB,EAAE,KAAa;QACvD,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,UAAU,CAAC,MAAc,EAAE,KAAa;QACpC,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,MAAM,CAAC,IAAW,EAAE,OAAsB,EAAE,KAAa;QACrD,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IACD,gBAAgB,CAAC,IAAW,EAAE,aAAmC,EAAE,KAAyB,EAAE,OAAsB,EAAE,KAAa;QAC/H,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;CACJ,CAAC","file":"AppRoomBridge.js","sourcesContent":["import { IMessage } from '../../../definition/messages';\nimport { IRoom } from '../../../definition/rooms/IRoom';\nimport { PermissionDeniedError } from '../../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../../managers/AppPermissionManager';\nimport { AppPermissions } from '../AppPermissions';\n\nexport const AppRoomBridge = {\n    hasReadPermission(appId: string) {\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.room.read)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.room.read],\n            });\n        }\n    },\n    hasWritePermission(appId: string) {\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.room.write)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.room.write],\n            });\n        }\n    },\n    create(room: IRoom, members: Array<string>, appId: string): void {\n        return this.hasWritePermission(appId);\n    },\n    getById(roomId: string, appId: string): void {\n        return this.hasReadPermission(appId);\n    },\n    getByName(roomName: string, appId: string): void {\n        return this.hasReadPermission(appId);\n    },\n    getCreatorById(roomId: string, appId: string): void {\n        return this.hasReadPermission(appId);\n    },\n    getCreatorByName(roomName: string, appId: string): void {\n        return this.hasReadPermission(appId);\n    },\n    getDirectByUsernames(username: Array<string>, appId: string): void {\n        return this.hasReadPermission(appId);\n    },\n    getMembers(roomId: string, appId: string): void {\n        return this.hasReadPermission(appId);\n    },\n    update(room: IRoom, members: Array<string>, appId: string): void {\n        return this.hasWritePermission(appId);\n    },\n    createDiscussion(room: IRoom, parentMessage: IMessage | undefined, reply: string | undefined, members: Array<string>, appId: string): void {\n        return this.hasWritePermission(appId);\n    },\n};\n"]}