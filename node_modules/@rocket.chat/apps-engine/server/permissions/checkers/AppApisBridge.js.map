{"version":3,"sources":["src/server/permissions/checkers/AppApisBridge.ts"],"names":[],"mappings":";;;AAAA,8EAA2E;AAE3E,8EAA2E;AAC3E,sDAAmD;AAEtC,QAAA,aAAa,GAAG;IACzB,oBAAoB,CAAC,KAAa;QAC9B,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACzE,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK;gBACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,IAAI,CAAC,OAAO,CAAC;aACpD,CAAC,CAAC;SACN;IACL,CAAC;IACD,WAAW,CAAC,GAAW,EAAE,KAAa;QAClC,OAAO,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IACD,cAAc,CAAC,KAAa;QACxB,OAAO,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;CACJ,CAAC","file":"AppApisBridge.js","sourcesContent":["import { PermissionDeniedError } from '../../errors/PermissionDeniedError';\nimport { AppApi } from '../../managers/AppApi';\nimport { AppPermissionManager } from '../../managers/AppPermissionManager';\nimport { AppPermissions } from '../AppPermissions';\n\nexport const AppApisBridge = {\n    hasGeneralPermission(appId: string) {\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.apis.default)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.apis.default],\n            });\n        }\n    },\n    registerApi(api: AppApi, appId: string): void {\n        return this.hasGeneralPermission(appId);\n    },\n    unregisterApis(appId: string): void {\n        return this.hasGeneralPermission(appId);\n    },\n};\n"]}