{"version":3,"sources":["src/server/permissions/checkers/AppPersistenceBridge.ts"],"names":[],"mappings":";;;AACA,8EAA2E;AAC3E,8EAA2E;AAC3E,sDAAmD;AAEtC,QAAA,oBAAoB,GAAG;IAChC,aAAa,CAAC,KAAa;QACvB,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;YAChF,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK;gBACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,WAAW,CAAC,OAAO,CAAC;aAC3D,CAAC,CAAC;SACN;IACL,CAAC;IACD,KAAK,CAAC,KAAa;QACf,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,MAAM,CAAC,IAAY,EAAE,KAAa;QAC9B,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,sBAAsB,CAAC,IAAY,EAAE,YAAgD,EAAE,KAAa;QAChG,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,QAAQ,CAAC,EAAU,EAAE,KAAa;QAC9B,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,kBAAkB,CAAC,YAAgD,EAAE,KAAa;QAC9E,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,MAAM,CAAC,EAAU,EAAE,KAAa;QAC5B,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,oBAAoB,CAAC,YAAgD,EAAE,KAAa;QAChF,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,MAAM,CAAC,EAAU,EAAE,IAAY,EAAE,MAAe,EAAE,KAAa;QAC3D,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IACD,oBAAoB,CAAC,YAAgD,EAAE,IAAY,EAAE,MAAe,EAAE,KAAa;QAC/G,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;CACJ,CAAC","file":"AppPersistenceBridge.js","sourcesContent":["import { RocketChatAssociationRecord } from '../../../definition/metadata';\nimport { PermissionDeniedError } from '../../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../../managers/AppPermissionManager';\nimport { AppPermissions } from '../AppPermissions';\n\nexport const AppPersistenceBridge = {\n    hasPermission(appId: string) {\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.persistence.default)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.persistence.default],\n            });\n        }\n    },\n    purge(appId: string): void {\n        return this.hasPermission(appId);\n    },\n    create(data: object, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    createWithAssociations(data: object, associations: Array<RocketChatAssociationRecord>, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    readById(id: string, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    readByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    remove(id: string, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    removeByAssociations(associations: Array<RocketChatAssociationRecord>, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    update(id: string, data: object, upsert: boolean, appId: string): void {\n        return this.hasPermission(appId);\n    },\n    updateByAssociations(associations: Array<RocketChatAssociationRecord>, data: object, upsert: boolean, appId: string): void {\n        return this.hasPermission(appId);\n    },\n};\n"]}