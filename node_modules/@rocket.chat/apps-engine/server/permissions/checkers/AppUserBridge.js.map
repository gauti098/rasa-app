{"version":3,"sources":["src/server/permissions/checkers/AppUserBridge.ts"],"names":[],"mappings":";;;AACA,8EAA2E;AAC3E,8EAA2E;AAC3E,sDAAmD;AAEtC,QAAA,aAAa,GAAG;IACzB,iBAAiB,CAAC,KAAa;QAC3B,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACtE,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK;gBACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,IAAI,CAAC,IAAI,CAAC;aACjD,CAAC,CAAC;SACN;IACL,CAAC;IACD,kBAAkB,CAAC,KAAa;QAC5B,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACvE,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK;gBACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,IAAI,CAAC,KAAK,CAAC;aAClD,CAAC,CAAC;SACN;IACL,CAAC;IACD,OAAO,CAAC,EAAU,EAAE,KAAa;QAC7B,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,aAAa,CAAC,QAAgB,EAAE,KAAa;QACzC,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,UAAU,CAAC,KAAa;QACpB,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD;;OAEG;IACH,kBAAkB;QACd,OAAO;IACX,CAAC;IACD,MAAM,CAAC,IAAoB,EAAE,KAAa,EAAE,OAA8B;QACtE,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IACD,MAAM,CAAC,IAAW,EAAE,KAAa;QAC7B,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IACD,MAAM,CAAC,IAAW,EAAE,OAAuB,EAAE,KAAa;QACtD,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;CACJ,CAAC","file":"AppUserBridge.js","sourcesContent":["import { IUser, IUserCreationOptions } from '../../../definition/users';\nimport { PermissionDeniedError } from '../../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../../managers/AppPermissionManager';\nimport { AppPermissions } from '../AppPermissions';\n\nexport const AppUserBridge = {\n    hasReadPermission(appId: string) {\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.user.read)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.user.read],\n            });\n        }\n    },\n    hasWritePermission(appId: string) {\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.user.write)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.user.write],\n            });\n        }\n    },\n    getById(id: string, appId: string): void {\n        return this.hasReadPermission(appId);\n    },\n    getByUsername(username: string, appId: string): void {\n        return this.hasReadPermission(appId);\n    },\n    getAppUser(appId: string): void {\n        return this.hasReadPermission(appId);\n    },\n    /**\n     * @private internal bridge method, pass it.\n     */\n    getActiveUserCount(): void {\n        return;\n    },\n    create(data: Partial<IUser>, appId: string, options?: IUserCreationOptions) {\n        return this.hasWritePermission(appId);\n    },\n    remove(user: IUser, appId: string): void {\n        return this.hasWritePermission(appId);\n    },\n    update(user: IUser, updates: Partial<IUser>, appId: string): void {\n        return this.hasWritePermission(appId);\n    },\n};\n"]}