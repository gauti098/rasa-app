{"version":3,"sources":["src/server/permissions/checkers/AppUiInteractionBridge.ts"],"names":[],"mappings":";;;AAEA,8EAA2E;AAC3E,8EAA2E;AAC3E,sDAAmD;AAEtC,QAAA,sBAAsB,GAAG;IAClC,wBAAwB,CAAC,KAAa;QAClC,IAAI,CAAC,2CAAoB,CAAC,aAAa,CAAC,KAAK,EAAE,+BAAc,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE;YAC3E,MAAM,IAAI,6CAAqB,CAAC;gBAC5B,KAAK;gBACL,kBAAkB,EAAE,CAAC,+BAAc,CAAC,EAAE,CAAC,WAAW,CAAC;aACtD,CAAC,CAAC;SACN;IACL,CAAC;IACD,UAAU,CAAC,IAAW,EAAE,WAA8B,EAAE,KAAa;QACjE,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;CACJ,CAAC","file":"AppUiInteractionBridge.js","sourcesContent":["import { IUIKitInteraction } from '../../../definition/uikit';\nimport { IUser } from '../../../definition/users';\nimport { PermissionDeniedError } from '../../errors/PermissionDeniedError';\nimport { AppPermissionManager } from '../../managers/AppPermissionManager';\nimport { AppPermissions } from '../AppPermissions';\n\nexport const AppUiInteractionBridge = {\n    hasInteractionPermission(appId: string) {\n        if (!AppPermissionManager.hasPermission(appId, AppPermissions.ui.interaction)) {\n            throw new PermissionDeniedError({\n                appId,\n                missingPermissions: [AppPermissions.ui.interaction],\n            });\n        }\n    },\n    notifyUser(user: IUser, interaction: IUIKitInteraction, appId: string): void {\n        return this.hasInteractionPermission(appId);\n    },\n};\n"]}