{"version":3,"sources":["src/server/accessors/SchedulerModify.ts"],"names":[],"mappings":";;;;;;;;;;;;AAOA,SAAS,iBAAiB,CAAC,KAAa,EAAE,KAAa;IACnD,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAI,KAAM,IAAK,KAAM,EAAE,CAAC;AACzE,CAAC;AAED,MAAa,eAAe;IACxB,YAA6B,MAA2B,EAAmB,KAAa;QAA3D,WAAM,GAAN,MAAM,CAAqB;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAE/E,YAAY,CAAC,GAAqB;;YAC3C,IAAI,CAAC,MAAM,CAAC,YAAY,iCAAM,GAAG,KAAE,EAAE,EAAE,iBAAiB,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,KAAI,IAAI,CAAC,KAAK,CAAC,CAAC;QAChG,CAAC;KAAA;IAEY,iBAAiB,CAAC,GAAuB;;YAClD,IAAI,CAAC,MAAM,CAAC,iBAAiB,iCAAM,GAAG,KAAE,EAAE,EAAE,iBAAiB,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,KAAI,IAAI,CAAC,KAAK,CAAC,CAAC;QACrG,CAAC;KAAA;IAEY,SAAS,CAAC,KAAa;;YAChC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5E,CAAC;KAAA;IAEY,aAAa;;YACtB,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;KAAA;CACJ;AAlBD,0CAkBC","file":"SchedulerModify.js","sourcesContent":["import { ISchedulerModify } from '../../definition/accessors';\nimport {\n    IOnetimeSchedule,\n    IRecurringSchedule,\n} from '../../definition/scheduler';\nimport { IAppSchedulerBridge } from '../bridges';\n\nfunction createProcessorId(jobId: string, appId: string): string {\n    return jobId.includes(`_${appId}`) ? jobId : `${ jobId }_${ appId }`;\n}\n\nexport class SchedulerModify implements ISchedulerModify {\n    constructor(private readonly bridge: IAppSchedulerBridge, private readonly appId: string) {}\n\n    public async scheduleOnce(job: IOnetimeSchedule): Promise<void> {\n        this.bridge.scheduleOnce({ ...job, id: createProcessorId(job.id, this.appId) }, this.appId);\n    }\n\n    public async scheduleRecurring(job: IRecurringSchedule): Promise<void> {\n        this.bridge.scheduleRecurring({ ...job, id: createProcessorId(job.id, this.appId) }, this.appId);\n    }\n\n    public async cancelJob(jobId: string): Promise<void> {\n        this.bridge.cancelJob(createProcessorId(jobId, this.appId), this.appId);\n    }\n\n    public async cancelAllJobs(): Promise<void> {\n        this.bridge.cancelAllJobs(this.appId);\n    }\n}\n"]}