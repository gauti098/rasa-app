{"version":3,"sources":["src/definition/uikit/UIKitInteractionPayloadFormatter.ts"],"names":[],"mappings":";;;AACA,mEAAkI;AAClI,6CAAyD;AAGzD,gCAAiC;AAEjC,SAAgB,sBAAsB,CAAC,IAA0B,EAAE,OAA0B;IACzF,IAAI,CAAC,CAAC,4CAAoB,CAAC,UAAU,EAAE,4CAAoB,CAAC,YAAY,EAAE,4CAAoB,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAChI,MAAM,IAAI,KAAK,CAAC,iBAAkB,OAAO,CAAC,IAAK,yBAAyB,CAAC,CAAC;KAC7E;IAED,MAAM,IAAI,GAAG,OAAO,CAAC,IAA8G,CAAC;IAEpI,OAAO;QACH,IAAI;QACJ,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,IAAI,EAAE,8BACF,KAAK,EAAE,OAAO,CAAC,KAAK,EACpB,IAAI,EAAE,0BAAa,CAAC,KAAK,EACzB,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,IAC3B,IAAI,KACP,QAAQ,EAAE,IAAI,GACH;KAClB,CAAC;AACN,CAAC;AAnBD,wDAmBC;AAED,SAAgB,sBAAsB,CAAC,gBAA6C,EAAE,OAA0B;IAC5G,IAAI,4CAAoB,CAAC,MAAM,KAAK,OAAO,CAAC,IAAI,EAAE;QAC9C,MAAM,IAAI,KAAK,CAAC,iBAAkB,OAAO,CAAC,IAAK,yBAAyB,CAAC,CAAC;KAC7E;IAED,OAAO;QACH,KAAK,EAAE,OAAO,CAAC,KAAK;QACpB,IAAI,EAAE,4CAAoB,CAAC,MAAM;QACjC,MAAM,EAAE,gBAAgB,CAAC,MAAM;QAC/B,MAAM,EAAE,gBAAgB,CAAC,MAAM;QAC/B,SAAS,EAAE,OAAO,CAAC,SAAS;KAC/B,CAAC;AACN,CAAC;AAZD,wDAYC","file":"UIKitInteractionPayloadFormatter.js","sourcesContent":["import { IUIKitErrorInteractionParam } from '../accessors/IUIController';\nimport { IUIKitErrorInteraction, IUIKitInteraction, IUIKitModalInteraction, UIKitInteractionType } from './IUIKitInteractionType';\nimport { IUIKitView, UIKitViewType } from './IUIKitView';\nimport { IUIKitModalViewParam } from './UIKitInteractionResponder';\n\nimport uuid = require('uuid/v1');\n\nexport function formatModalInteraction(view: IUIKitModalViewParam, context: IUIKitInteraction): IUIKitModalInteraction {\n    if (![UIKitInteractionType.MODAL_OPEN, UIKitInteractionType.MODAL_UPDATE, UIKitInteractionType.MODAL_CLOSE].includes(context.type)) {\n        throw new Error(`Invalid type \"${ context.type }\" for modal interaction`);\n    }\n\n    const type = context.type as UIKitInteractionType.MODAL_OPEN | UIKitInteractionType.MODAL_UPDATE | UIKitInteractionType.MODAL_CLOSE;\n\n    return {\n        type,\n        triggerId: context.triggerId,\n        appId: context.appId,\n        view: {\n            appId: context.appId,\n            type: UIKitViewType.MODAL,\n            id: view.id ? view.id : uuid(),\n            ...view,\n            showIcon: true,\n        } as IUIKitView,\n    };\n}\n\nexport function formatErrorInteraction(errorInteraction: IUIKitErrorInteractionParam, context: IUIKitInteraction): IUIKitErrorInteraction {\n    if (UIKitInteractionType.ERRORS !== context.type) {\n        throw new Error(`Invalid type \"${ context.type }\" for error interaction`);\n    }\n\n    return {\n        appId: context.appId,\n        type: UIKitInteractionType.ERRORS,\n        errors: errorInteraction.errors,\n        viewId: errorInteraction.viewId,\n        triggerId: context.triggerId,\n    };\n}\n"]}